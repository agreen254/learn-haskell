Everything must produce a value
There must be an else statement in an if-else block
Can infix a function:
  div 92 10 -> 9
  92 `div` 10 -> 9
Not equals denoted as /=
The successor function succ returns any valid successor for the input
  succ 9 -> 10
min and max only take two arguments
use :l {name} to load a script into ghci
if-else syntax:
  doubleSmallNumber x = 
    if x > 100
    then x
    else x*2
We use a single-quote ' at the end of a function to either denote a strict version of the function (one that isnt lazy) or slightly modified version
Cannot start any function with an uppercase character
Use the 'let' keyword in ghci to define a name
Lists are of a homogenous type
  Can append to a list with the '++' operator
  But to do this, Haskell must walk through the entire left side of the list
  So if you add a single thing to the end of a 50 million item list, it will take a while
  Using the ':' operator (called 'cons'), however, will put something at the beginning of a list immediately
  This must be a single item, such as a character or an individual number
The index of operator is '!!'
  nums = [1, 2, 3]
  nums !! 1 -> 2
Lists can be compared by the elements in their lexicographical order
  If the first elements are equal, then the next corresponding elements will be checked, etc
  a = [3, 2, 1]
  b = [2, 1, 0]
  a > b --> True

  c = [2, 100, 500]
  a > c --> True
Some rudimentary list functions:
  l = [5, 4, 3, 2, 1]
  head l --> 5

  tail l --> [4, 3, 2, 1]

  last l --> 1

  init l --> [5, 4, 3, 2]

  length l --> 5

  null l --> False

  reverse l --> [1, 2, 3, 4, 5]

  take 3 l --> [5, 4, 3]
  take 1 l --> [5]
  take 10000 l --> [5, 4, 3, 2, 1]  // will only take as many eles are in the list if we specify more
  take 0 l --> []

  drop 3 l --> [2, 1]
  drop 1 l --> [4, 3, 2, 1]
  drop 100 l --> []
  drop 0 l --> [5, 4, 3, 2, 1]

  minimum l --> 1
  
  maximum l --> 5

  sum l --> 15

  product l --> 120

  elem 4 l --> True
  10 `elem` l --> False
List Ranges can also be specified with the '..' operator
  l = [1..20] --> [1, 2, 3, 4, 5, .. , 20]
  l = [20, 19 .. 1] --> [20, 19, 18, 17, .. , 1]
  Do not use floating point numbers in list ranges! You can get some weird numbers!'
  l = [1, 3 .. 21] --> [1, 3, 5, 7, 9, .. , 21] Note that this does not increment by 3s! It uses 1 and 3 as the first two terms and then takes the difference to use as the step!
  To increment by threes, we would do [1, 4 .. 21]
Infinite Lists
  Haskell is lazy, so it will not try to immediately evaluate a list you specify as infinite
  Say we want the first 24 multiples of 13
  We could do:  [13, 26 .. 24 * 13]
  The better ways is to do:  take 24 [13, 26 ..]

  cycle takes a list and cycles it into an infinite list
  do not try to display the list, because it goes on forever
  must slice it off somehwere
  take 10 (cycle [1, 2, 3]) --> [1, 2, 3, 1, 2, 3, 1, 2, 3, 1]

  take 12 (cycle "LOL ") --> "LOL LOL LOL "

  repeat takes an element and produces and infinite list of only that element
  take 10 (repeat 5) --> [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
We can specify more detailed list comprehensions that are very similar to mathematical notation
  [x*2 | x <- [1..10]] means to double every number drawn from the set [1..10]

  we can add a condition (also called a predicate), too
  they go after the binding parts and are separated from them by a comma